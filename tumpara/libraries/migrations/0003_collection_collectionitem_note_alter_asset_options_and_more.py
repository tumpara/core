# Generated by Django 4.0.4 on 2022-07-07 09:59

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.comparison


class Migration(migrations.Migration):

    dependencies = [
        ('libraries', '0002_alter_file_path'),
    ]

    operations = [
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the album.', max_length=250, verbose_name='title')),
            ],
            options={
                'verbose_name': 'collection',
                'verbose_name_plural': 'collection',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='CollectionItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='%(class)s_instance', related_query_name='%(class)s_instance', serialize=False, to='libraries.asset', verbose_name='asset reference')),
                ('content', models.TextField(help_text='Content of the note, which should be rendered using the markdown syntax.', verbose_name='note content')),
            ],
            options={
                'verbose_name': 'note',
                'verbose_name_plural': 'notes',
            },
            bases=('libraries.asset',),
        ),
        migrations.AlterModelOptions(
            name='asset',
            options={'get_latest_by': 'media_timestamp', 'ordering': [django.db.models.functions.comparison.Coalesce('media_timestamp', 'import_timestamp')], 'verbose_name': 'asset', 'verbose_name_plural': 'assets'},
        ),
        migrations.AddField(
            model_name='asset',
            name='media_location',
            field=django.contrib.gis.db.models.fields.PointField(blank=True, help_text='Real-world location associated with this entry.', null=True, srid=4326, verbose_name='media location'),
        ),
        migrations.AddField(
            model_name='asset',
            name='media_timestamp',
            field=models.DateTimeField(blank=True, help_text="Timestamp associated with the asset's medium. This will mostly be set for assets with files.", null=True, verbose_name='media timestamp'),
        ),
        migrations.AddField(
            model_name='asset',
            name='stack_key',
            field=models.PositiveIntegerField(blank=True, default=None, help_text='Identifier that is the same for all entries on a stack.', null=True, verbose_name='stack key'),
        ),
        migrations.AddField(
            model_name='asset',
            name='stack_representative',
            field=models.BooleanField(default=False, help_text="Designates whether this asset is its stack's representative. It will be shown as the cover element when the stack is rendered.", verbose_name='stack representative status'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['visibility', 'library', 'media_timestamp'], name='timestamp_filtering'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['visibility', 'library', 'media_location'], name='location_filtering'),
        ),
        migrations.AddConstraint(
            model_name='asset',
            constraint=models.UniqueConstraint(condition=models.Q(('stack_representative', True)), fields=('stack_key', 'stack_representative'), name='unique_representative_per_stack'),
        ),
        migrations.AddConstraint(
            model_name='asset',
            constraint=models.CheckConstraint(check=models.Q(('stack_key__isnull', False), ('stack_representative', False), _connector='OR'), name='not_a_representative_when_unstacked'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='asset',
            field=models.ForeignKey(help_text='The asset to place in the album.', on_delete=django.db.models.deletion.CASCADE, to='libraries.asset', verbose_name='asset'),
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='collection',
            field=models.ForeignKey(help_text='The collection the asset is placed in.', on_delete=django.db.models.deletion.CASCADE, to='libraries.collection', verbose_name='collection'),
        ),
        migrations.AddField(
            model_name='collection',
            name='assets',
            field=models.ManyToManyField(related_name='collections', related_query_name='collection', through='libraries.CollectionItem', to='libraries.asset'),
        ),
    ]
