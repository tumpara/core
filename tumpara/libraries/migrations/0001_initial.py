# Generated by Django 4.0.3 on 2022-05-14 14:42

from django.db import migrations, models
import django.db.models.deletion
import tumpara.libraries.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('visibility', models.PositiveSmallIntegerField(choices=[(0, 'Public'), (1, 'All logged-in users'), (2, 'Library members'), (3, 'Only library owners'), (10, 'Use the default value')], default=10, help_text='Determines who can see this object.', verbose_name='visibility')),
                ('import_timestamp', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the asset was created / imported.', verbose_name='add timestamp')),
            ],
            options={
                'verbose_name': 'asset',
                'verbose_name_plural': 'assets',
            },
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(help_text='URI for the configured storage backend.', max_length=255, unique=True, validators=[tumpara.libraries.models.validate_library_source], verbose_name='source')),
                ('context', models.CharField(help_text='Context string that identifies the content types to expect in the library.', max_length=50, verbose_name='context')),
                ('default_visibility', models.PositiveSmallIntegerField(choices=[(0, 'Public'), (1, 'All logged-in users'), (2, 'Library members'), (3, 'Only library owners'), (10, 'Use the default value')], default=2, help_text='Default visibility value for assets where it is not defined.', validators=[tumpara.libraries.models.validate_library_default_visibility], verbose_name='default visibility')),
            ],
            options={
                'verbose_name': 'library',
                'verbose_name_plural': 'libraries',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(db_index=True, help_text='Path of this file, relative to the library root. This should *not*start with a slash.', max_length=255, verbose_name='filename')),
                ('digest', models.CharField(db_index=True, help_text="The file's cryptographic hash to quickly identify changes.", max_length=64, verbose_name='digest value')),
                ('availability', models.DateTimeField(blank=True, help_text='Time the file was last deemed available to open. If this is unset, the file is known to be unavailable.', null=True, verbose_name='last seen timestamp')),
                ('asset', models.ForeignKey(help_text='The library asset this file is attached to.', on_delete=django.db.models.deletion.CASCADE, related_name='files', related_query_name='file', to='libraries.asset', verbose_name='library asset')),
            ],
            options={
                'verbose_name': 'file',
                'verbose_name_plural': 'files',
            },
        ),
        migrations.AddField(
            model_name='asset',
            name='library',
            field=models.ForeignKey(help_text='Library the object is attached to. Users will have access depending on the visibility and their membership in this library.', on_delete=django.db.models.deletion.CASCADE, related_name='assets', related_query_name='asset', to='libraries.library', verbose_name='library'),
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(condition=models.Q(('availability__isnull', False)), fields=('asset', 'path'), name='path_unique_per_asset'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['id', 'visibility', 'library'], name='library_visibility_filtering'),
        ),
    ]
