# Generated by Django 4.0.3 on 2022-04-07 13:18

from django.db import migrations, models
import django.db.models.deletion
import tumpara.libraries.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(help_text='URI for the configured storage backend.', max_length=255, unique=True, validators=[tumpara.libraries.models.validate_library_source], verbose_name='source')),
                ('context', models.CharField(help_text='Context string that identifies the content types to expect in the library.', max_length=50, verbose_name='context')),
                ('default_visibility', models.PositiveSmallIntegerField(choices=[(0, 'Public'), (1, 'All logged-in users'), (2, 'Library members'), (3, 'Only library owners')], default=2, help_text='Default visibility value for records where it is not defined.', verbose_name='default visibility')),
            ],
            options={
                'verbose_name': 'library',
                'verbose_name_plural': 'libraries',
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visibility', models.PositiveSmallIntegerField(choices=[(0, 'Public'), (1, 'All logged-in users'), (2, 'Library members'), (3, 'Only library owners'), (None, "Use the library's default value")], default=None, help_text='Determines who can see this object.', null=True, verbose_name='visibility')),
                ('object_pk', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('library', models.ForeignKey(help_text='Library the object is attached to. Users will have access depending on the visibility and their membership in this library.', on_delete=django.db.models.deletion.CASCADE, related_name='records', related_query_name='record', to='libraries.library', verbose_name='library')),
            ],
            options={
                'verbose_name': 'library',
                'verbose_name_plural': 'libraries',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(db_index=True, help_text='Path of this file, relative to the library root. This should *not*start with a slash.', max_length=255, verbose_name='filename')),
                ('digest', models.CharField(db_index=True, help_text="The file's cryptographic hash to quickly identify changes.", max_length=64, verbose_name='digest value')),
                ('availability', models.DateTimeField(blank=True, help_text='Time the file was last deemed available to open. If this is unset, the file is known to be unavailable.', null=True, verbose_name='last seen timestamp')),
                ('record', models.ForeignKey(help_text='The library record this file is attached to.', on_delete=django.db.models.deletion.CASCADE, related_name='files', related_query_name='file', to='libraries.record', verbose_name='library record')),
            ],
            options={
                'verbose_name': 'file',
                'verbose_name_plural': 'files',
            },
        ),
        migrations.AddConstraint(
            model_name='record',
            constraint=models.UniqueConstraint(fields=('content_type', 'object_pk'), name='record_unique_for_content_type'),
        ),
        migrations.AddConstraint(
            model_name='file',
            constraint=models.UniqueConstraint(condition=models.Q(('availability__isnull', False)), fields=('record', 'path'), name='path_unique_per_record'),
        ),
    ]
