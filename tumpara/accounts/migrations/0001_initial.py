# Generated by Django 3.2.11 on 2022-02-08 11:57

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('login_name', models.CharField(help_text='Username used for logging in. This must have 150 characters or fewer and may only contain letters, digits and these characters: @ . + - _', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='identifier')),
                ('full_name', models.CharField(blank=True, help_text='Full name of the account owner.', max_length=150, verbose_name='full name')),
                ('short_name', models.CharField(blank=True, help_text="Short name this user should be referred to with. In most cases, this will be the user's first name, but they may something different (like a nickname) as well. If this is blank, clients should default to the full name.", max_length=150, verbose_name='display name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active status')),
                ('preferences', models.JSONField(help_text='Storage space arbitrary settings / preference values that can be used by clients.', null=True, verbose_name='preferences')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_owner', models.BooleanField(help_text='Designates that this membership has edit permissions on the object (for containers, they may add or remove).', verbose_name='owner status')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', related_query_name='membership', to='accounts.user')),
            ],
            options={
                'verbose_name': 'user membership',
                'verbose_name_plural': 'user memberships',
            },
        ),
        migrations.AddConstraint(
            model_name='usermembership',
            constraint=models.UniqueConstraint(fields=('user', 'content_type', 'object_id'), name='user_object_membership_unique'),
        ),
    ]
